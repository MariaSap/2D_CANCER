# Data merging utilities for combining real and synthetic medical images
# This module handles the creation of augmented datasets by combining original and GAN-generated images
# Combines real and synthetic medical images into unified training datasets while preserving class structure and balance.
import os, shutil, glob

def merge_real_synth(real_root, synth_root, out_root):
    """
    Merge real medical images with GAN-generated synthetic images into a single dataset.
    
    This function is essential for data augmentation in medical AI, where limited real data
    is supplemented with high-quality synthetic images to improve model performance.
    The merged dataset maintains the class structure while significantly increasing
    the training data available for each cancer type.
    
    Args:
        real_root (str): Path to directory containing real medical images
                        Expected structure: real_root/class_0/, real_root/class_1/, etc.
        synth_root (str): Path to directory containing synthetic images from GAN
                         Expected structure: synth_root/class_0/, synth_root/class_1/, etc.
        out_root (str): Path to output directory where merged dataset will be created
                       Will create: out_root/class_0/, out_root/class_1/, etc.
    """
    # Remove existing output directory to ensure clean merge
    # This prevents mixing old synthetic data with new generations
    if os.path.exists(out_root):
        shutil.rmtree(out_root)
    
    # Create fresh output directory
    os.makedirs(out_root, exist_ok=True)
    
    # Get list of classes from real data directory
    # Classes are expected to be subdirectories (e.g., "0", "1", "2", "3" for 4 cancer types)
    # sorted() ensures consistent ordering across different systems
    classes = sorted(os.listdir(real_root))
    # print(classes)
    
    # Process each class separately to maintain balanced representation
    for cls in classes:
        # Create output subdirectory for this class
        dst = os.path.join(out_root, cls)
        os.makedirs(dst, exist_ok=True)
        
        # Copy all real images for this class first
        # glob.glob finds all files in the class directory (regardless of extension)
        # This preserves the original, validated medical images
        for p in glob.glob(os.path.join(real_root, cls, "*")):
            shutil.copy(p, dst)
        
        # Copy synthetic images for this class (if they exist)
        synth_cls = os.path.join(synth_root, cls)
        if os.path.exists(synth_cls):
            # Add GAN-generated images to supplement the real data
            # Note: There appears to be a syntax error in the original code
            # The glob pattern should include the wildcard properly
            for p in glob.glob(os.path.join(synth_cls, "*")):  # Fixed: added missing "*" in glob pattern
                shutil.copy(p, dst)
                
    # After merging, the output directory contains:
    # - All original real medical images (maintaining clinical validity)
    # - All synthetic images generated by the GAN (providing data augmentation)
    # This creates a larger, more diverse training dataset while preserving
    # the balance between different cancer types


from pathlib import Path
DATA_ROOT = Path(r"C:data")              # Root directory with train/valid/test folders
SYNTH_ROOT = Path(r"C:data\synth\train")   # Where synthetic images will be saved
MERGED_ROOT = Path(r"C:data\merged_train") # Where real+synthetic merged data will be stored
REAL_ROOT = Path(r"C:\Users\sapounaki.m\Desktop\2D_CANCER\data\train")

if __name__ == "__main__":
    # Execute the complet
    merge_real_synth(REAL_ROOT, SYNTH_ROOT, MERGED_ROOT)

